# -*- coding: utf-8 -*-
"""NETS 213 Final QC Aggregation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YYoQP6Pv5j6SzR3_RwDzHvJZp07C1QYm
"""

import pandas as pd

def valid_num(num):
  nums = [0, 1, 2, 3, 4]
  return num in nums

mturk_res = pd.read_csv('sample_output.csv.csv')
def quality_control(mturk_res):
  df_dic = {}
  df_tries = {}
  for row in mturk_res.iterrows():
    for i in range(1, 10):
      ans = row[1]['Answer.word' + str(i)]
      key = row[1]['Input.retrieved_goal_' + str(i)]
      if valid_num(ans):
        if key in df_dic:
          df_dic[key] = df_dic[key] + ans
          df_tries[key] = df_tries[key] + 1
        else:
          df_dic[key] = ans
          df_tries[key] = 1
  
  # output = {}
  tuples = []

  for key in df_dic:
    # output[key] = df_dic[key] / df_tries[key]
    tuples.append((key, df_dic[key] / df_tries[key]))

  return tuples

quality_control(mturk_res)

def aggregation(mturk_res):
  df_dic = {}
  df_tries = {}

  response_votes = {}
  inputs = []

  for row in mturk_res.iterrows():
    for i in range(1, 10):
      ans = row[1]['Answer.word' + str(i)]
      
      key = row[1]['Input.retrieved_goal_' + str(i)]
      key_ans = row[1]['Input.retrieved_goal_' + str(i)] + ": " + str(ans)

      if key not in inputs:
          inputs.append(key)

      if valid_num(ans):
        if key_ans in response_votes:
          response_votes[key_ans] = response_votes[key_ans] + 1
        else:
          response_votes[key_ans] = 1

  output = {}
  tuples = []

  for input in inputs:
    max = 0
    ans = 0
    for i in range(0, 5):
      key = input + ": " + str(i)
      if key in response_votes:
        ans_responses = response_votes[key]
        if ans_responses >= max:
          ans = i
          max = ans_responses

    if max != 0:
      output[input] = ans

  for key in output:
    tuples.append((key, output[key]))

  return tuples

aggregation(mturk_res)

agg = pd.DataFrame(aggregation(mturk_res), columns =['input', 'answer'])
qc = pd.DataFrame(quality_control(mturk_res), columns =['input', 'avg_answer'])

agg.to_csv("dummy_aggregation.csv", index=False)
qc.to_csv("dummy_quality_control.csv", index=False)